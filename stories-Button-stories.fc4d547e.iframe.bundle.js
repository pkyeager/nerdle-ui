"use strict";(self.webpackChunk_pkyeager_nerdle_ui=self.webpackChunk_pkyeager_nerdle_ui||[]).push([[791],{"./src/stories/Button.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function _typeof(o){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(o){return typeof o}:function(o){return o&&"function"==typeof Symbol&&o.constructor===Symbol&&o!==Symbol.prototype?"symbol":typeof o},_typeof(o)}function _defineProperties(e,r){for(var t=0;t<r.length;t++){var o=r[t];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,_toPropertyKey(o.key),o)}}function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=_typeof(t)||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=_typeof(i))return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==_typeof(i)?i:i+""}__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{AllVariants:()=>AllVariants,Danger:()=>Danger,Large:()=>Large,Primary:()=>Primary,Secondary:()=>Secondary,Small:()=>Small,Success:()=>Success,__namedExportsOrder:()=>__namedExportsOrder,default:()=>Button_stories});var Button=function(){return function _createClass(e,r,t){return r&&_defineProperties(e.prototype,r),t&&_defineProperties(e,t),Object.defineProperty(e,"prototype",{writable:!1}),e}((function Button(options){!function _classCallCheck(a,n){if(!(a instanceof n))throw new TypeError("Cannot call a class as a function")}(this,Button),this.element=document.createElement("button"),this.element.textContent=options.text,this.element.className=this.getClassNames(options),options.onClick&&this.element.addEventListener("click",options.onClick),this.element.addEventListener("click",this.createRipple)}),[{key:"getClassNames",value:function getClassNames(options){return"".concat("nerdle-btn relative overflow-hidden transition-all duration-200"," ").concat({primary:"bg-primary text-white hover:bg-primary-dark",secondary:"bg-gray-200 text-gray-800 hover:bg-gray-300",success:"bg-green-500 text-white hover:bg-green-600",danger:"bg-red-500 text-white hover:bg-red-600"}[options.variant||"primary"]," ").concat({sm:"px-3 py-1 text-sm",md:"px-4 py-2",lg:"px-6 py-3 text-lg"}[options.size||"md"])}},{key:"createRipple",value:function createRipple(event){var button=event.currentTarget,circle=document.createElement("span"),diameter=Math.max(button.clientWidth,button.clientHeight),radius=diameter/2;circle.style.width=circle.style.height="".concat(diameter,"px"),circle.style.left="".concat(event.clientX-button.offsetLeft-radius,"px"),circle.style.top="".concat(event.clientY-button.offsetTop-radius,"px"),circle.className="nerdle-ripple",button.appendChild(circle),setTimeout((function(){return circle.remove()}),600)}},{key:"render",value:function render(){return this.element}}])}();const Button_stories={title:"Components/Button",tags:["autodocs"],parameters:{docs:{description:{component:"\n## Button Component\n\nA versatile button component with different variants and sizes.\n\n### Features\n- Multiple variants (primary, secondary, success, danger)\n- Different sizes (sm, md, lg)\n- Ripple effect animation\n- Fully customizable\n        "}}},argTypes:{text:{control:"text",description:"Button text content"},variant:{control:{type:"select"},options:["primary","secondary","success","danger"],description:"Button style variant"},size:{control:{type:"select"},options:["sm","md","lg"],description:"Button size"},onClick:{action:"clicked"}}};var Template=function Template(args){return new Button(args).render()},Primary={render:function render(){return Template({text:"Primary Button",variant:"primary",size:"md"})}},Secondary={render:function render(){return Template({text:"Secondary Button",variant:"secondary",size:"md"})}},Success={render:function render(){return Template({text:"Success Button",variant:"success",size:"md"})}},Danger={render:function render(){return Template({text:"Danger Button",variant:"danger",size:"md"})}},Small={render:function render(){return Template({text:"Small Button",size:"sm"})}},Large={render:function render(){return Template({text:"Large Button",size:"lg"})}},AllVariants={render:function render(){var container=document.createElement("div");container.className="flex gap-4 flex-wrap";var sizes=["sm","md","lg"];return["primary","secondary","success","danger"].forEach((function(variant){sizes.forEach((function(size){var button=new Button({text:"".concat(variant," ").concat(size),variant,size});container.appendChild(button.render())}))})),container}};Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"{\n  render: () => Template({\n    text: 'Primary Button',\n    variant: 'primary',\n    size: 'md'\n  })\n}",...Primary.parameters?.docs?.source}}},Secondary.parameters={...Secondary.parameters,docs:{...Secondary.parameters?.docs,source:{originalSource:"{\n  render: () => Template({\n    text: 'Secondary Button',\n    variant: 'secondary',\n    size: 'md'\n  })\n}",...Secondary.parameters?.docs?.source}}},Success.parameters={...Success.parameters,docs:{...Success.parameters?.docs,source:{originalSource:"{\n  render: () => Template({\n    text: 'Success Button',\n    variant: 'success',\n    size: 'md'\n  })\n}",...Success.parameters?.docs?.source}}},Danger.parameters={...Danger.parameters,docs:{...Danger.parameters?.docs,source:{originalSource:"{\n  render: () => Template({\n    text: 'Danger Button',\n    variant: 'danger',\n    size: 'md'\n  })\n}",...Danger.parameters?.docs?.source}}},Small.parameters={...Small.parameters,docs:{...Small.parameters?.docs,source:{originalSource:"{\n  render: () => Template({\n    text: 'Small Button',\n    size: 'sm'\n  })\n}",...Small.parameters?.docs?.source}}},Large.parameters={...Large.parameters,docs:{...Large.parameters?.docs,source:{originalSource:"{\n  render: () => Template({\n    text: 'Large Button',\n    size: 'lg'\n  })\n}",...Large.parameters?.docs?.source}}},AllVariants.parameters={...AllVariants.parameters,docs:{...AllVariants.parameters?.docs,source:{originalSource:"{\n  render: () => {\n    const container = document.createElement('div');\n    container.className = 'flex gap-4 flex-wrap';\n    const variants: ButtonProps['variant'][] = ['primary', 'secondary', 'success', 'danger'];\n    const sizes: ButtonProps['size'][] = ['sm', 'md', 'lg'];\n    variants.forEach(variant => {\n      sizes.forEach(size => {\n        const button = new Button({\n          text: `${variant} ${size}`,\n          variant,\n          size\n        });\n        container.appendChild(button.render());\n      });\n    });\n    return container;\n  }\n}",...AllVariants.parameters?.docs?.source}}};const __namedExportsOrder=["Primary","Secondary","Success","Danger","Small","Large","AllVariants"]}}]);